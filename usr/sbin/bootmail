#!/bin/sh -e
#
#    bootmail - email some people when this system (re)boots
#
#    Copyright (C) 2011 Dustin Kirkland <kirkland@ubuntu.com>
#
#    Authors:
#        Dustin Kirkland <kirkland@ubuntu.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


# This should be comma-separated, and can be configured via debconf:
#  sudo dpkg-reconfigure bootmail
recipients=
[ -f /etc/bootmail/recipients ] && recipients="$(cat /etc/bootmail/recipients)"
if [ -z "$recipients" ]; then
	echo "No recipients defined in [/etc/bootmail/recipients]" 1>&2
	exit 0
fi

# Work against a tempfile
temp=$(mktemp bootmail-XXXXXXXXXXXX)
trap "rm -f $temp 2>/dev/null || true" EXIT HUP INT QUIT TERM

# Print the header
hostname=$(hostname -f)
date=$(date)
subject="bootmail: [$hostname] booted on [$date]"
echo "$subject" > "$temp"
echo >> "$temp"

# Update the motd now, so that it's ready when we append it
[ -d /etc/update-motd.d ] && run-parts --lsbsysinit /etc/update-motd.d > /etc/motd

# Concatenate all specified boot logs
if [ -f "/etc/bootmail/logs" ]; then
	for i in $(cat /etc/bootmail/logs); do
		echo >> "$temp"
		echo "==================" >> "$temp"
		echo "[$i]:" >> "$temp"
		echo "==================" >> "$temp"
		cat "$i" >> "$temp"
		echo "==================" >> "$temp"
		echo >> "$temp"
	done
fi

# Create a GPG key for message signing, if necessary (and possible)
keyid="bootmail_$(hostname -f)"
if command -v gpg -v openssl -v pem2openpgp >/dev/null 2>&1; then
	if ! gpg --list-keys "$keyid" >/dev/null 2>&1; then
		mkdir -m 755 -p /var/lib/bootmail
		chmod 755 /var/lib/bootmail
		# Use openssl rather than gpg to generate a key, as openssl doesn't block on lack of entropy.
		# Perhaps slightly less secure than gpg, but all we're doing is signing some simple emails.
		if [ -r /etc/ssh/ssh_host_rsa_key ]; then
			# Use the ssh host key, if possible
			cat /etc/ssh/ssh_host_rsa_key | PEM2OPENPGP_USAGE_FLAGS=certify,sign pem2openpgp "$keyid" | gpg --import
		else
			# Otherwise, generate a new one from scratch
			openssl genrsa 4096 | PEM2OPENPGP_USAGE_FLAGS=certify,sign pem2openpgp "$keyid" | gpg --import
		fi
		# Save a copy of the public key, for recipients to import
		gpg --export -a "$keyid" > /var/lib/bootmail/$keyid.pub
		chmod 644 /var/lib/bootmail/$keyid.pub
	fi
	echo "To verify this signature, import the public key of this system from:" >> "$temp"
	echo " * /var/lib/bootmail/$keyid.pub" >> "$temp"
	# Sign and send the mail
	sed -e "s/[^[:print:]]//g" "$temp" | gpg -a -s --clearsign --local-user "$keyid" | mail -s "$subject" "$recipients" -- -F "Bootmail" -f "noreply@$hostname"
else
	sed -e "s/[^[:print:]]//g" "$temp" | mail -s "$subject" "$recipients" -- -F "Bootmail" -f "noreply@$hostname"
fi
